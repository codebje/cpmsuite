;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sdcommand - send a command and receive a response
;;
;; sdcommand will activate the SPI slave select line, then send 0xff until
;; $ff is received. It will then send six bytes from (HL), receive an R1
;; response in A, then receive an R3 or R7 response in BC/DE. The SPI slave
;; line will then be deactivated.
;;
;; in:		hl	pointer to command to send
;		b	1 if a response word is required
;; out:		a	R1 response code - bit 7 is set on timeout
;;		bc	response word 31:16
;;		de	response word 15:0
#local
sdcommand::

		in0	a, (SPI_CTRL)
		or	a, SPI_CTRL_ENABLE
		out0	(SPI_CTRL), a

		push	bc
		call	sendcmd
		call	getr1
		pop	bc
		ld	h, a
		jr	nz, abort

		djnz	abort

		ld	a, $ff
		out0	(SPI_DATA), a
		call	busy
		in0	b, (SPI_DATA)
		out0	(SPI_DATA), a
		call	busy
		in0	c, (SPI_DATA)
		out0	(SPI_DATA), a
		call	busy
		in0	d, (SPI_DATA)
		out0	(SPI_DATA), a
		call	busy
		in0	e, (SPI_DATA)

abort:
		ld	a, $ff
		out0	(SPI_DATA), a
		call	busy
		in0	a, (SPI_CTRL)
		and	a, ~SPI_CTRL_ENABLE
		out0	(SPI_CTRL), a
		ld	a, h
		ret
#endlocal

;; sendcmd: send a 6-byte command sequence from hl to (SPI_DATA)
#local
sendcmd::	ld	bc, $06 << 8 | SPI_DATA

byteloop:	outi
		call	busy
		or	b
		jr	nz, byteloop

		ret
#endlocal

;; wait for SPI to be done
#local
busy::		in0	a, (SPI_CTRL)
		and	SPI_CTRL_BUSY
		jr	nz, busy
		ret
#endlocal

;; get an R1 response - ZF is reset on exit on timeout
#local
getr1::		ld	b, 50

readloop:	ld	a, $ff
		out0	(SPI_DATA), a
		call	busy
		in0	a, (SPI_DATA)
		tst	$80
		ret	z

		djnz	readloop

		ld	a, $ff
		ret
#endlocal

;; get a word response into (hl)
#local
getr7::
		ld	hl, r7bytes
		.db	$dd		; turn next ld hl,** into ld ix,**
getr3::
		ld	hl, r3bytes
getword::
		ld	bc, $04 << 8 | SPI_DATA
		ld	d, $ff
readloop:	out0	(SPI_DATA), d
		call	busy
		ini
		jr	nz, readloop
		ret
#endlocal

;; print an R3 response
#local
rmsg:		.db	'R? data = '
rdata:		.db	'?? ?? ?? ?? $'
printr3::	ld	a, '3'
		ld	(rmsg+1), a
		ld	ix, r3bytes
		jr	printer
printr7::	ld	a, '7'
		ld	(rmsg+1), a
		ld	ix, r7bytes

printer:
		ld	a, (ix+0)
		call	bin_to_hex
		ld	(rdata), de
		ld	a, (ix+1)
		call	bin_to_hex
		ld	(rdata+3), de
		ld	a, (ix+2)
		call	bin_to_hex
		ld	(rdata+6), de
		ld	a, (ix+3)
		call	bin_to_hex
		ld	(rdata+9), de
		ld	de, rmsg
		ld	c, CPM_WRITESTR
		call	BDOS
		ret
#endlocal

;; getdata - read a data block
;; hl - where to write
;; bc - the number of bytes to read
#local
getdata::
		push	bc

		ld	b, 0
tokenloop:	ld	a, $ff
		out0	(SPI_DATA), a
		call	busy
		in0	a, (SPI_DATA)
		cp	$ff
		jr	nz, responded
		djnz	tokenloop

		pop	bc
		ld	de, datatimeout
		ld	c, CPM_WRITESTR
		call	BDOS
		ret

responded:	
		;; print what's what
		push	af
		push	hl
		call	bin_to_hex
		ld	(tokenbyte), de
		ld	de, datatoken
		ld	c, CPM_WRITESTR
		call	BDOS
		pop	hl
		pop	af
		pop	bc

		cp	$fe
		ret	nz

bytes:		ld	a, $ff
		out0	(SPI_DATA), a
		call	busy
		in0	a, (SPI_DATA)
		ld	(hl), a
		inc	hl

		dec	bc
		ld	a, b
		or	c
		jr	nz, bytes

		;; skip two CRC bytes
		ld	a, $ff
		out0	(SPI_DATA), a
		call	busy
		out0	(SPI_DATA), a
		call	busy

		ret

datatimeout:	.db	'Timeout waiting for data response', 13, 10, '$'
datatoken:	.db	'Data token byte: '
tokenbyte:	.db	'??', 13, 10, '$'
#endlocal

cmd0:		.db	$40, $00, $00, $00, $00, $95		; puts the card into SPI mode
cmd8:		.db	$48, $00, $00, $01, $aa, $87		; sets voltage to 01 = 2.7v-3.6v
cmd9:		.db	$49, $00, $00, $00, $00, $01		; read CSD
cmd10:		.db	$4a, $00, $00, $00, $00, $01		; read CID
cmd13:		.db	$4d, $00, $00, $00, $00, $01		; read status
cmd17:		.db	$51, $00, $00, $00, $00, $01		; read block
cmd55:		.db	$77, $00, $00, $00, $00, $65		; application command follows
cmd58:		.db	$7a, $00, $00, $00, $00, $01		; read OCR

acmd41:		.db	$69, $40, $00, $00, $00, $77		; initialise card

r3bytes:	.db	0, 0, 0, 0
r7bytes:	.db	0, 0, 0, 0
